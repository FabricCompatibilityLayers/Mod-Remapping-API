plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'legacy-looming' version "1.6-SNAPSHOT" // Version must be the same as fabric-loom's
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		name = "Jitpack"
		url = "https://jitpack.io/"
	}
}

dependencies {
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"

	mappings legacy.yarn(project.minecraft_version, project.yarn_build)

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation(include(legacy.apiModule("legacy-fabric-logger-api-v1", project.fabric_version)))
	modImplementation(include("maven.modrinth:spasm:${project.spasm_version}"))

	shadow(runtimeOnly('net.fabricmc:mapping-io:0.6.1')) {
		transitive = false
	}
	shadow(runtimeOnly('net.fabricmc:tiny-remapper:0.10.2')) {
		transitive = false
	}

	shadow(runtimeOnly('com.google.code.gson:gson:2.2.4')) {
		transitive = false
	}

	implementation(include("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))
	implementation(include("com.github.thecatcore.CursedMixinExtensions:fabric:1.0.0"))
	implementation(include("com.github.thecatcore:WFVAIO:1.1.0"))
}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
//	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

shadowJar {
	configurations = [project.configurations.shadow]
	exclude("META-INF")

	relocate 'net.fabricmc.mappingio', 'fr.catcore.modremapperapi.impl.lib.mappingio'
	relocate 'net.fabricmc.tinyremapper', 'fr.catcore.modremapperapi.impl.lib.tinyremapper'
	relocate 'com.google.gson', 'fr.catcore.modremapperapi.impl.lib.gson'
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

remapJar {
	// wait until the shadowJar is done
	dependsOn(shadowJar)
	mustRunAfter(shadowJar)
	// Set the input jar for the task. Here use the shadow Jar that include the .class of the transitive dependency
	inputFile = file(shadowJar.archivePath)
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "mod-remapping-api"
	changelog = """
Propagate and complete mappings from TR context.
"""
	uploadFile = remapJar

	dependencies {
		embedded.version "spasm", project.spasm_version
	}
}
